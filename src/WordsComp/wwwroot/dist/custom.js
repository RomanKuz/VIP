function getWordContainerPostion(){var e=$("#word-element");return{x:e.offset().left,y:e.offset().top}}var Common;!function(e){function o(){return new t}var t=function(){function e(){this.appName="gameApp",this.hubConnectToGroupMethodName="connect",this.connectedToGroup="userAdded",this.leftGroup="userLeft",this.groupFulled="groupFulled",this.competitionHub="competitionHub",this.gameStarted="gameStarted",this.didMove="didMove",this.gameFinished="gameFinished",this.doMove="doMove",this.passMove="passMove"}return e}();e.Constants=t,e.GetConstants=o}(Common||(Common={}));var Mixins;!function(e){function o(e,o){return function(t,n){if(!e.$$phase){var r;return e.$apply(function(){r=o(t,n)}),r}return o(t,n)}}var t=function(){function e(e){this.immediateScheduler=Rx.Scheduler.immediate,this.$scope=e}return e.prototype.now=function(){return this.immediateScheduler.now()},e.prototype.schedule=function(e,t){return this.immediateScheduler.schedule(e,o(this.$scope,t))},e.prototype.scheduleFuture=function(e,o,t){throw new Error("Not supported")},e.prototype.scheduleRecursive=function(e,o){throw new Error("Not supported")},e.prototype.scheduleRecursiveFuture=function(e,o,t){throw new Error("Not supported")},e.prototype.schedulePeriodic=function(e,o,t){throw new Error("Not supported")},e.prototype.catch=function(e){return this.immediateScheduler.catch(e)},e}();e.NgScheduler=t}(Mixins||(Mixins={}));var App;!function(e){function o(){return n}var t=Common.GetConstants(),n=angular.module(t.appName,["ui.bootstrap.modal","cgBusy","ngAnimate"]);e.GetApp=o}(App||(App={}));var Models;!function(e){var o=function(){function e(){}return e}();e.User=o}(Models||(Models={}));var Models;!function(e){var o=function(){function e(){}return e}();e.Group=o}(Models||(Models={}));var Models;!function(e){var o=function(){function e(){}return e}();e.Score=o}(Models||(Models={}));var Models;!function(e){var o=function(){function e(){this.variant=null,this.isTrue=!1,this.isSelected=!1}return e}();e.TranslateVariant=o}(Models||(Models={}));var Models;!function(e){var o=function(){function e(){}return e}();e.Word=o}(Models||(Models={}));var Models;!function(e){var o=function(){function e(){}return e}();e.Game=o}(Models||(Models={}));var Models;!function(e){var o=function(){function e(){}return e}();e.GameResult=o}(Models||(Models={}));var Models;!function(e){var o=function(){function e(){}return e}();e.MoveResult=o}(Models||(Models={}));var Models;!function(e){var o=function(){function e(){}return e}();e.PassedWordInfo=o}(Models||(Models={}));var Models;!function(e){!function(e){e[e.Beginer=1]="Beginer",e[e.Intermediate=2]="Intermediate",e[e.Advanced=3]="Advanced"}(e.Level||(e.Level={}));e.Level}(Models||(Models={}));var Services;!function(e){var o=function(){function e(e){this.constants=Common.GetConstants(),this.connection=e.getConnection(),this.hub=this.connection.createHubProxy(this.constants.competitionHub)}return e.prototype.connectToHub=function(){return this.hub.connection.start()},e.prototype.doMove=function(e,o,t){return this.hub.invoke(this.constants.doMove,e,o,t)},e.prototype.passMove=function(e){return this.hub.invoke(this.constants.passMove,e)},e.prototype.connectToNewGroup=function(e,o){return this.hub.invoke(this.constants.hubConnectToGroupMethodName,e,o)},e.prototype.onConnectedToGroup=function(e){this.hub.on(this.constants.connectedToGroup,function(o){return e(o)})},e.prototype.onGroupFulled=function(e){this.hub.on(this.constants.groupFulled,function(o){return e(o)})},e.prototype.onUserLeft=function(e){this.hub.on(this.constants.leftGroup,function(o){return e(o[0])})},e.prototype.gameStarted=function(e){this.hub.on(this.constants.gameStarted,function(o){e(o)})},e.prototype.didMove=function(e){this.hub.on(this.constants.didMove,function(o){return e(o)})},e.prototype.gameFinished=function(e){this.hub.on(this.constants.gameFinished,function(o){return e(o[0])})},e.$inject=["Services.HubConnectionService"],e}();e.ConnectToGameService=o,angular.module(Common.GetConstants().appName).service("Services.ConnectToGameService",o)}(Services||(Services={}));var Services;!function(e){var o=function(){function e(){}return e.prototype.getConnection=function(){return e.connection||(e.connection=$.hubConnection("/signalr",{useDefaultPath:!1}),e.connection.logging=!0),e.connection},e}();e.HubConnectionService=o,angular.module(Common.GetConstants().appName).service("Services.HubConnectionService",o)}(Services||(Services={}));var Services;!function(e){function o(e){var o=new Promise(function(o){e.subscribe(function(){o({})})});return o}var t=function(){function e(e,o){this.constants=Common.GetConstants(),this.$modal=o,this.$rootScope=e,this.$rootScope.isStartGamePage=!1,this.$rootScope.userId=null,this.groupFulledObservable=new Rx.Subject,this.addedToGroupObservable=new Rx.Subject,this.userLeftGroupObservable=new Rx.Subject,this.gameStartedObservable=new Rx.Subject}return e.prototype.callInDigestLoop=function(e){this.$rootScope.$$phase?e():this.$rootScope.$apply(function(){e()})},e.prototype.showStartGameModal=function(){var e={};e.scope=this.connectToGameScope,e.templateUrl="connectToGroup.html",e.windowTemplateUrl="windowTemplate.html",e.backdrop="static",e.keyboard=!1,e.animation=!0,e.size="lg",this.startGameModalInstance=this.$modal.open(e)},e.prototype.showGameFinishedModalWindow=function(e,o){if(void 0===e&&void 0===o)throw"One of boolean flags should be specified";var t=this.connectToGameScope,n={};n.controller=function(n){n.playAgain=t.connectToGroup,o?n.message="It is draw. Good job :D!\nDo you want to play again?":e?n.message="Congratulation! You have won!\nDo you want to play again?":n.message="You have lost, but who cares :). It was fun.\nDo you want to play again?"},n.templateUrl="gameFinished.html",n.windowTemplateUrl="windowTemplate.html",n.backdrop="static",n.keyboard=!1,n.animation=!0,n.size="lg",this.startGameModalInstance=this.$modal.open(n)},e.prototype.setConnectToGameScope=function(e){this.connectToGameScope=e},e.prototype.handleConnectionToGroup=function(e){var t=this;e.fail(function(e){console.log("smth bad happened: "+e)}),this.callInDigestLoop(function(){t.callInDigestLoop(function(){var e=t.addedToGroupObservable.take(1);t.$rootScope.addedToGroupPromise=o(e),e.subscribe(function(){t.startGameModalInstance&&(t.startGameModalInstance.close(),t.startGameModalInstance=null)});var n=t.groupFulledObservable.take(1);t.$rootScope.user2ConnectedPromise=o(n),n.subscribe(function(){t.$rootScope.loadingGamePromise=o(Rx.Observable.merge(t.userLeftGroupObservable.take(1),t.gameStartedObservable.take(1)).take(1))}),t.$rootScope.isStartGamePage=!0})}),this.callInDigestLoop(function(){t.connectToGameScope.connectToGroupPromise=e})},e.prototype.handleUserAddedToGroup=function(){this.addedToGroupObservable.onNext({})},e.prototype.handleConnectionToHub=function(e){var o=this;e.fail(function(){console.log("smth bad happened")}),e.done(function(){o.callInDigestLoop(function(){o.showStartGameModal()})}),this.callInDigestLoop(function(){o.$rootScope.connectToHubPromise=e})},e.prototype.handleGameFinished=function(e,o){var t=this;this.callInDigestLoop(function(){t.$rootScope.isStartGamePage=!1,t.showGameFinishedModalWindow(e,o)})},e.prototype.handleGroupFulled=function(){var e=this;this.callInDigestLoop(function(){e.groupFulledObservable.onNext({})})},e.prototype.handleGameStarted=function(){var e=this;this.callInDigestLoop(function(){e.$rootScope.isStartGamePage=!0,e.startGameModalInstance&&(e.startGameModalInstance.close(),e.startGameModalInstance=null)}),this.gameStartedObservable.onNext({})},e.prototype.getUserId=function(){return this.$rootScope.userId},e.prototype.setUserId=function(e){this.$rootScope.userId=e},e.prototype.handleUser2LeftGroup=function(){var e=this;this.callInDigestLoop(function(){e.userLeftGroupObservable.onNext({}),e.$rootScope.isStartGamePage=!1,e.showStartGameModal()})},e.prototype.getUserDisplayName=function(){return this.$rootScope.displayName},e.$inject=["$rootScope","$uibModal"],e}();e.StateHandlerService=t,angular.module(Common.GetConstants().appName).service("Services.StateHandlerService",t)}(Services||(Services={}));var controllers;!function(e){var o=function(){function e(e,o,t,n){this.connectionHubService=e,this.$scope=o,this.stateHandler=t,this.$rootScope=n,this.initializeViewModel()}return e.prototype.initializeViewModel=function(){var e=this;this.stateHandler.setConnectToGameScope(this.$scope),this.connectionHubService.onUserLeft(function(o){return e.onUserLeft.call(e,o)}),this.connectionHubService.onGroupFulled(function(o){return e.onGroupFulled.call(e,o)}),this.connectionHubService.onConnectedToGroup(function(o){return e.onConnectedToGroup.call(e,o)}),this.$scope.connectToGroup=function(){return e.connectToGroup.apply(e)};var o=this.connectionHubService.connectToHub().done(function(o){e.stateHandler.setUserId(o)});this.stateHandler.handleConnectionToHub(o),this.$scope.levels=[{level:Models.Level.Beginer,name:"Новачок"},{level:Models.Level.Intermediate,name:"Средний"},{level:Models.Level.Advanced,name:"Высокий"}],this.$rootScope.level=this.$scope.levels[1],this.$scope.changeLevel=function(o){return e.$rootScope.level=o},this.$rootScope.displayName="Случайный игрок"},e.prototype.onGroupFulled=function(e){this.groupInfo=e,this.stateHandler.handleGroupFulled()},e.prototype.onUserLeft=function(e){this.groupInfo=null,this.stateHandler.handleUser2LeftGroup()},e.prototype.connectToGroup=function(){var e=this.connectionHubService.connectToNewGroup(this.stateHandler.getUserDisplayName(),this.$rootScope.level.level);this.stateHandler.handleConnectionToGroup(e)},e.prototype.onConnectedToGroup=function(e){this.stateHandler.setUserId(e),this.stateHandler.handleUserAddedToGroup()},e.$inject=["Services.ConnectToGameService","$scope","Services.StateHandlerService","$rootScope"],e}();e.ConnectToGameController=o,angular.module(Common.GetConstants().appName).controller("controllers.ConnectToGameController",o)}(controllers||(controllers={}));var controllers;!function(e){var o=function(){function e(e,o,t,n,r){this.connectionHubService=e,this.$scope=o,this.stateHandler=t,this.$interval=n,this.secondsForMove=10,this.$timeout=r,this.initializeViewModel()}return e.prototype.initializeViewModel=function(){var e=this;this.connectionHubService.gameStarted(function(o){return e.startGame.call(e,o)}),this.connectionHubService.didMove(function(o){return e.user2didMove.call(e,o)}),this.$scope.doMove=function(o){return e.doMove.call(e,o)},this.connectionHubService.onUserLeft(function(){return e.onUserLeft.call(e)}),this.unsetGameInfo()},e.prototype.onUserLeft=function(){this.stopTimer(),this.unsetGameInfo()},e.prototype.unsetGameInfo=function(){var e=this;this.gameInfo=null,this.callInDigestLoop(function(){e.$scope.currentWord=null,e.$scope.secondsForMoveLeft=null,e.$scope.percentagesLeft=null,e.$scope.isCurrentUserMove=null,e.$scope.currentUserScore=null,e.$scope.passedWords=[],e.$scope.leftWords=[]})},e.prototype.startGame=function(e){var o=this;this.gameInfo=e,this.words=e.words;var t=e.user1.userId===this.stateHandler.getUserId();this.userNum=t?1:2,this.$scope.$apply(function(){function n(e){for(var o,t,n=e.slice(0),r=n.length;r;)t=Math.floor(Math.random()*r--),o=n[r],n[r]=n[t],n[t]=o;return n}o.$scope.currentUserScore=t?e.user1Score:e.user2Score,o.$scope.user2Score=t?e.user2Score:e.user1Score,o.$scope.user2DisplayName=t?e.user2.displayName:e.user1.displayName,o.$scope.currentWordIndex=0,o.$scope.currentWord=o.words[0],o.setVarinatsOrder(),o.$scope.isCurrentUserMove=t&&1===o.gameInfo.currentMove||!t&&2===o.gameInfo.currentMove,o.$scope.leftWords=n(o.words.slice(1))}),this.stateHandler.handleGameStarted(),this.startTimer()},e.prototype.callInDigestLoop=function(e){this.$scope.$$phase?e():this.$scope.$apply(function(){e()})},e.prototype.startTimer=function(){var e=this;if(this.timerPromise)throw"Previous timer should be stopped";this.callInDigestLoop(function(){e.$scope.secondsForMoveLeft=e.secondsForMove,e.$scope.percentagesLeft=100}),this.timerPromise=this.$interval(function(){e.$scope.secondsForMoveLeft--,e.$scope.percentagesLeft=e.$scope.secondsForMoveLeft/10*100,0===e.$scope.secondsForMoveLeft&&e.$scope.isCurrentUserMove&&e.passMove()},1e3,10)},e.prototype.stopTimer=function(){this.timerPromise&&(this.$interval.cancel(this.timerPromise),this.timerPromise=null)},e.prototype.user2didMove=function(e){var o=this;this.$scope.$apply(function(){o.handleMove(e,!1)})},e.prototype.passMove=function(){var e=this;this.connectionHubService.passMove(this.userNum).done(function(o){e.$scope.$apply(function(){e.handleMove(o,!0)})})},e.prototype.doMove=function(e){var o=this;if(0===this.$scope.currentWord.translateVariants.filter(function(e){return e.isSelected}).length&&(this.stopTimer(),0!==this.$scope.secondsForMoveLeft)){var t=this.$scope.currentWord.translateVariants.filter(function(o){return o.variant===e})[0];t?t.isSelected=!0:console.log("Incorrect var selected"),this.connectionHubService.doMove(this.userNum,this.$scope.currentWord.word,e).done(function(e){o.$scope.$apply(function(){o.handleMove(e,!0)})})}},e.prototype.handleMove=function(e,o){var t=this;this.stopTimer();var n=1===this.userNum?this.gameInfo.user1Score:this.gameInfo.user2Score,r=1===this.userNum?this.gameInfo.user2Score:this.gameInfo.user1Score,s=o?n:r;e.isCorrect?e.isSuccessful?s.successfulMoves++:s.wrongMoves++:console.error(e.errorMessage),e.selectedVariantIndex!==-1&&(this.$scope.currentWord.translateVariants[e.selectedVariantIndex].isSelected=!0),1===this.userNum?(this.$scope.currentUserScore=this.gameInfo.user1Score,this.$scope.user2Score=this.gameInfo.user2Score):(this.$scope.currentUserScore=this.gameInfo.user2Score,this.$scope.user2Score=this.gameInfo.user1Score),this.$timeout(function(){function n(e,o){for(var t=0;t<e.length;){if(o(e[t],t))return void e.splice(t,1);++t}}if(t.$scope.isCurrentUserMove=!o,t.$scope.currentWordIndex++,o){var r=new Models.PassedWordInfo;r.word=t.$scope.currentWord.word,r.answer=t.$scope.currentWord.translateVariants.filter(function(e){return e.isTrue}).shift().variant,r.wasPassed=e.isSuccessful,t.$scope.passedWords.push(r)}t.$scope.currentWord=t.gameInfo.words[t.$scope.currentWordIndex],t.setVarinatsOrder(),n(t.$scope.leftWords,function(e){return e.word===t.$scope.currentWord.word}),e.isLastMove?(t.stateHandler.handleGameFinished(t.$scope.currentUserScore.successfulMoves>t.$scope.user2Score.successfulMoves,t.$scope.currentUserScore.successfulMoves==t.$scope.user2Score.successfulMoves),t.unsetGameInfo()):t.startTimer()},1e3,!0)},e.prototype.setVarinatsOrder=function(){this.$scope.currentWord&&this.$scope.currentWord.translateVariants.forEach(function(e,o){return e.order=o+1})},e.$inject=["Services.ConnectToGameService","$scope","Services.StateHandlerService","$interval","$timeout"],e}();e.GameController=o,angular.module(Common.GetConstants().appName).controller("controllers.GameController",o)}(controllers||(controllers={})),$(function(){$("#word, .word-left-item-caption").attr("unselectable","on").css({"-moz-user-select":"-moz-none","-o-user-select":"none","-khtml-user-select":"none","-webkit-user-select":"none","-ms-user-select":"none","user-select":"none"}).bind("selectstart",function(){return!1})}),$(function(){$(document).keypress(function(e){if(13===e.which)$(".btn-submit:visible").first().click();else if(e.which>=48&&e.which<=57){var o=e.which-48;$(".translateVariant:visible").filter(function(e,t){return $(t).data("order")===o}).first().click()}})}),$(function(){$("#user2variants").bind("DOMNodeInserted",function(){return $(".translateVariant.nohover").tooltip()})});
//# sourceMappingURL=data:application/json;base64,
