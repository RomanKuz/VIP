function getWordContainerPostion(){var $element=$("#word-element");return{x:$element.offset().left,y:$element.offset().top}}var Common;!function(Common){function GetConstants(){return new Constants}var Constants=function(){function Constants(){this.appName="gameApp",this.hubConnectToGroupMethodName="connect",this.connectedToGroup="userAdded",this.leftGroup="userLeft",this.groupFulled="groupFulled",this.competitionHub="competitionHub",this.gameStarted="gameStarted",this.didMove="didMove",this.gameFinished="gameFinished",this.doMove="doMove",this.passMove="passMove"}return Constants}();Common.Constants=Constants,Common.GetConstants=GetConstants}(Common||(Common={}));var Mixins;!function(Mixins){function actionWrapper($scope,action){return function(scheduler,state){if(!$scope.$$phase){var value_1;return $scope.$apply(function(){value_1=action(scheduler,state)}),value_1}return action(scheduler,state)}}var NgScheduler=function(){function NgScheduler($scope){this.immediateScheduler=Rx.Scheduler.immediate,this.$scope=$scope}return NgScheduler.prototype.now=function(){return this.immediateScheduler.now()},NgScheduler.prototype.schedule=function(state,action){return this.immediateScheduler.schedule(state,actionWrapper(this.$scope,action))},NgScheduler.prototype.scheduleFuture=function(state,dueTime,action){throw new Error("Not supported")},NgScheduler.prototype.scheduleRecursive=function(state,action){throw new Error("Not supported")},NgScheduler.prototype.scheduleRecursiveFuture=function(state,dueTime,action){throw new Error("Not supported")},NgScheduler.prototype.schedulePeriodic=function(state,period,action){throw new Error("Not supported")},NgScheduler.prototype.catch=function(handler){return this.immediateScheduler.catch(handler)},NgScheduler}();Mixins.NgScheduler=NgScheduler}(Mixins||(Mixins={}));var App;!function(App){function GetApp(){return app}var constants=Common.GetConstants(),app=angular.module(constants.appName,["ui.bootstrap.modal","cgBusy","ngAnimate"]);App.GetApp=GetApp}(App||(App={}));var Models;!function(Models){var User=function(){function User(){}return User}();Models.User=User}(Models||(Models={}));var Models;!function(Models){var Group=function(){function Group(){}return Group}();Models.Group=Group}(Models||(Models={}));var Models;!function(Models){var Score=function(){function Score(){}return Score}();Models.Score=Score}(Models||(Models={}));var Models;!function(Models){var TranslateVariant=function(){function TranslateVariant(){this.variant=null,this.isTrue=!1,this.isSelected=!1}return TranslateVariant}();Models.TranslateVariant=TranslateVariant}(Models||(Models={}));var Models;!function(Models){var Word=function(){function Word(){}return Word}();Models.Word=Word}(Models||(Models={}));var Models;!function(Models){var Game=function(){function Game(){}return Game}();Models.Game=Game}(Models||(Models={}));var Models;!function(Models){var GameResult=function(){function GameResult(){}return GameResult}();Models.GameResult=GameResult}(Models||(Models={}));var Models;!function(Models){var MoveResult=function(){function MoveResult(){}return MoveResult}();Models.MoveResult=MoveResult}(Models||(Models={}));var Models;!function(Models){var PassedWordInfo=function(){function PassedWordInfo(){}return PassedWordInfo}();Models.PassedWordInfo=PassedWordInfo}(Models||(Models={}));var Models;!function(Models){!function(Level){Level[Level.Beginer=1]="Beginer",Level[Level.Intermediate=2]="Intermediate",Level[Level.Advanced=3]="Advanced"}(Models.Level||(Models.Level={}));Models.Level}(Models||(Models={}));var Services;!function(Services){var ConnectToGameService=function(){function ConnectToGameService(hubConnectionService){this.constants=Common.GetConstants(),this.connection=hubConnectionService.getConnection(),this.hub=this.connection.createHubProxy(this.constants.competitionHub)}return ConnectToGameService.prototype.connectToHub=function(){return this.hub.connection.start()},ConnectToGameService.prototype.doMove=function(moveOrder,word,variant){return this.hub.invoke(this.constants.doMove,moveOrder,word,variant)},ConnectToGameService.prototype.passMove=function(moveOrder){return this.hub.invoke(this.constants.passMove,moveOrder)},ConnectToGameService.prototype.connectToNewGroup=function(displayName,level){return this.hub.invoke(this.constants.hubConnectToGroupMethodName,displayName,level)},ConnectToGameService.prototype.onConnectedToGroup=function(callBack){this.hub.on(this.constants.connectedToGroup,function(msg){return callBack(msg)})},ConnectToGameService.prototype.onGroupFulled=function(callBack){this.hub.on(this.constants.groupFulled,function(msg){return callBack(msg)})},ConnectToGameService.prototype.onUserLeft=function(callBack){this.hub.on(this.constants.leftGroup,function(msg){return callBack(msg[0])})},ConnectToGameService.prototype.gameStarted=function(callBack){this.hub.on(this.constants.gameStarted,function(msg){callBack(msg)})},ConnectToGameService.prototype.didMove=function(callBack){this.hub.on(this.constants.didMove,function(msg){return callBack(msg)})},ConnectToGameService.prototype.gameFinished=function(callBack){this.hub.on(this.constants.gameFinished,function(msg){return callBack(msg[0])})},ConnectToGameService.$inject=["Services.HubConnectionService"],ConnectToGameService}();Services.ConnectToGameService=ConnectToGameService,angular.module(Common.GetConstants().appName).service("Services.ConnectToGameService",ConnectToGameService)}(Services||(Services={}));var Services;!function(Services){var HubConnectionService=function(){function HubConnectionService(){}return HubConnectionService.prototype.getConnection=function(){return HubConnectionService.connection||(HubConnectionService.connection=$.hubConnection("/signalr",{useDefaultPath:!1}),HubConnectionService.connection.logging=!0),HubConnectionService.connection},HubConnectionService}();Services.HubConnectionService=HubConnectionService,angular.module(Common.GetConstants().appName).service("Services.HubConnectionService",HubConnectionService)}(Services||(Services={}));var Services;!function(Services){function toPromiseCustom(observable){var promise=new Promise(function(resolve){observable.subscribe(function(){resolve({})})});return promise}var StateHandlerService=function(){function StateHandlerService($rootScope,$modal){this.constants=Common.GetConstants(),this.$modal=$modal,this.$rootScope=$rootScope,this.$rootScope.isStartGamePage=!1,this.$rootScope.userId=null,this.groupFulledObservable=new Rx.Subject,this.addedToGroupObservable=new Rx.Subject,this.userLeftGroupObservable=new Rx.Subject,this.gameStartedObservable=new Rx.Subject}return StateHandlerService.prototype.callInDigestLoop=function(action){this.$rootScope.$$phase?action():this.$rootScope.$apply(function(){action()})},StateHandlerService.prototype.showStartGameModal=function(){var opt={};opt.scope=this.connectToGameScope,opt.templateUrl="connectToGroup.html",opt.windowTemplateUrl="windowTemplate.html",opt.backdrop="static",opt.keyboard=!1,opt.animation=!0,opt.size="lg",this.startGameModalInstance=this.$modal.open(opt)},StateHandlerService.prototype.showGameFinishedModalWindow=function(isWin,isDraw){if(void 0===isWin&&void 0===isDraw)throw"One of boolean flags should be specified";var connectToGameScope=this.connectToGameScope,opt={};opt.controller=function($scope){$scope.playAgain=connectToGameScope.connectToGroup,isDraw?$scope.message="Ничья. Отличная игра :D!\nХотите сыграть ещё раз?":isWin?$scope.message="Поздравления! Вы выиграли!\nХотите сыграть ещё раз?":$scope.message="Даже если проиграл, преобретенный опыт останется навсегда с тобой и станет твоей наградой :)\nХотите сыграть ещё раз?"},opt.templateUrl="gameFinished.html",opt.windowTemplateUrl="windowTemplate.html",opt.backdrop="static",opt.keyboard=!1,opt.animation=!0,opt.size="lg",this.startGameModalInstance=this.$modal.open(opt)},StateHandlerService.prototype.setConnectToGameScope=function(connectToGameScope){this.connectToGameScope=connectToGameScope},StateHandlerService.prototype.handleConnectionToGroup=function(promise){var _this=this;promise.fail(function(error){console.log("smth bad happened: "+error)}),this.callInDigestLoop(function(){_this.callInDigestLoop(function(){var addedToGroup=_this.addedToGroupObservable.take(1);_this.$rootScope.addedToGroupPromise=toPromiseCustom(addedToGroup),addedToGroup.subscribe(function(){_this.startGameModalInstance&&(_this.startGameModalInstance.close(),_this.startGameModalInstance=null)});var groupFulled=_this.groupFulledObservable.take(1);_this.$rootScope.user2ConnectedPromise=toPromiseCustom(groupFulled),groupFulled.subscribe(function(){_this.$rootScope.loadingGamePromise=toPromiseCustom(Rx.Observable.merge(_this.userLeftGroupObservable.take(1),_this.gameStartedObservable.take(1)).take(1))}),_this.$rootScope.isStartGamePage=!0})}),this.callInDigestLoop(function(){_this.connectToGameScope.connectToGroupPromise=promise})},StateHandlerService.prototype.handleUserAddedToGroup=function(){this.addedToGroupObservable.onNext({})},StateHandlerService.prototype.handleConnectionToHub=function(promise){var _this=this;promise.fail(function(){console.log("smth bad happened")}),promise.done(function(){_this.callInDigestLoop(function(){_this.showStartGameModal()})}),this.callInDigestLoop(function(){_this.$rootScope.connectToHubPromise=promise})},StateHandlerService.prototype.handleGameFinished=function(isWin,isDraw){var _this=this;this.callInDigestLoop(function(){_this.$rootScope.isStartGamePage=!1,_this.showGameFinishedModalWindow(isWin,isDraw)})},StateHandlerService.prototype.handleGroupFulled=function(){var _this=this;this.callInDigestLoop(function(){_this.groupFulledObservable.onNext({})})},StateHandlerService.prototype.handleGameStarted=function(){var _this=this;this.callInDigestLoop(function(){_this.$rootScope.isStartGamePage=!0,_this.startGameModalInstance&&(_this.startGameModalInstance.close(),_this.startGameModalInstance=null)}),this.gameStartedObservable.onNext({})},StateHandlerService.prototype.getUserId=function(){return this.$rootScope.userId},StateHandlerService.prototype.setUserId=function(userId){this.$rootScope.userId=userId},StateHandlerService.prototype.handleUser2LeftGroup=function(){var _this=this;this.callInDigestLoop(function(){_this.userLeftGroupObservable.onNext({}),_this.$rootScope.isStartGamePage=!1,_this.showStartGameModal()})},StateHandlerService.prototype.getUserDisplayName=function(){return this.$rootScope.displayName},StateHandlerService.$inject=["$rootScope","$uibModal"],StateHandlerService}();Services.StateHandlerService=StateHandlerService,angular.module(Common.GetConstants().appName).service("Services.StateHandlerService",StateHandlerService)}(Services||(Services={}));var controllers;!function(controllers){var ConnectToGameController=function(){function ConnectToGameController(connectionHubService,$scope,stateHandler,$rootScope){this.connectionHubService=connectionHubService,this.$scope=$scope,this.stateHandler=stateHandler,this.$rootScope=$rootScope,this.initializeViewModel()}return ConnectToGameController.prototype.initializeViewModel=function(){var _this=this;this.stateHandler.setConnectToGameScope(this.$scope),this.connectionHubService.onUserLeft(function(data){return _this.onUserLeft.call(_this,data)}),this.connectionHubService.onGroupFulled(function(data){return _this.onGroupFulled.call(_this,data)}),this.connectionHubService.onConnectedToGroup(function(data){return _this.onConnectedToGroup.call(_this,data)}),this.$scope.connectToGroup=function(){return _this.connectToGroup.apply(_this)};var promise=this.connectionHubService.connectToHub().done(function(value){_this.stateHandler.setUserId(value)});this.stateHandler.handleConnectionToHub(promise),this.$scope.levels=[{level:Models.Level.Beginer,name:"Новачок"},{level:Models.Level.Intermediate,name:"Средний"},{level:Models.Level.Advanced,name:"Высокий"}],this.$rootScope.level=this.$scope.levels[1],this.$scope.changeLevel=function(level){return _this.$rootScope.level=level},this.$rootScope.displayName="Случайный игрок"},ConnectToGameController.prototype.onGroupFulled=function(groupInfo){this.groupInfo=groupInfo,this.stateHandler.handleGroupFulled()},ConnectToGameController.prototype.onUserLeft=function(groupInfo){this.groupInfo=null,this.stateHandler.handleUser2LeftGroup()},ConnectToGameController.prototype.connectToGroup=function(){var promise=this.connectionHubService.connectToNewGroup(this.stateHandler.getUserDisplayName(),this.$rootScope.level.level);this.stateHandler.handleConnectionToGroup(promise)},ConnectToGameController.prototype.onConnectedToGroup=function(userId){this.stateHandler.setUserId(userId),this.stateHandler.handleUserAddedToGroup()},ConnectToGameController.$inject=["Services.ConnectToGameService","$scope","Services.StateHandlerService","$rootScope"],ConnectToGameController}();controllers.ConnectToGameController=ConnectToGameController,angular.module(Common.GetConstants().appName).controller("controllers.ConnectToGameController",ConnectToGameController)}(controllers||(controllers={}));var controllers;!function(controllers){var GameController=function(){function GameController(connectionHubService,$scope,stateHandler,$interval,$timeout){this.connectionHubService=connectionHubService,this.$scope=$scope,this.stateHandler=stateHandler,this.$interval=$interval,this.secondsForMove=10,this.$timeout=$timeout,this.initializeViewModel()}return GameController.prototype.initializeViewModel=function(){var _this=this;this.connectionHubService.gameStarted(function(data){return _this.startGame.call(_this,data)}),this.connectionHubService.didMove(function(data){return _this.user2didMove.call(_this,data)}),this.$scope.doMove=function(variant){return _this.doMove.call(_this,variant)},this.connectionHubService.onUserLeft(function(){return _this.onUserLeft.call(_this)}),this.unsetGameInfo()},GameController.prototype.onUserLeft=function(){this.stopTimer(),this.unsetGameInfo()},GameController.prototype.unsetGameInfo=function(){var _this=this;this.gameInfo=null,this.callInDigestLoop(function(){_this.$scope.currentWord=null,_this.$scope.secondsForMoveLeft=null,_this.$scope.percentagesLeft=null,_this.$scope.isCurrentUserMove=null,_this.$scope.currentUserScore=null,_this.$scope.passedWords=[],_this.$scope.leftWords=[]})},GameController.prototype.startGame=function(game){var _this=this;this.gameInfo=game,this.words=game.words;var isUser1=game.user1.userId===this.stateHandler.getUserId();this.userNum=isUser1?1:2,this.$scope.$apply(function(){function shuffle(arr){for(var t,i,array=arr.slice(0),m=array.length;m;)i=Math.floor(Math.random()*m--),t=array[m],array[m]=array[i],array[i]=t;return array}_this.$scope.currentUserScore=isUser1?game.user1Score:game.user2Score,_this.$scope.user2Score=isUser1?game.user2Score:game.user1Score,_this.$scope.user2DisplayName=isUser1?game.user2.displayName:game.user1.displayName,_this.$scope.currentWordIndex=0,_this.$scope.currentWord=_this.words[0],_this.setVarinatsOrder(),_this.$scope.isCurrentUserMove=isUser1&&1===_this.gameInfo.currentMove||!isUser1&&2===_this.gameInfo.currentMove,_this.$scope.leftWords=shuffle(_this.words.slice(1))}),this.stateHandler.handleGameStarted(),this.startTimer()},GameController.prototype.callInDigestLoop=function(action){this.$scope.$$phase?action():this.$scope.$apply(function(){action()})},GameController.prototype.startTimer=function(){var _this=this;if(this.timerPromise)throw"Previous timer should be stopped";this.callInDigestLoop(function(){_this.$scope.secondsForMoveLeft=_this.secondsForMove,_this.$scope.percentagesLeft=100}),this.timerPromise=this.$interval(function(){_this.$scope.secondsForMoveLeft--,_this.$scope.percentagesLeft=_this.$scope.secondsForMoveLeft/10*100,0===_this.$scope.secondsForMoveLeft&&_this.$scope.isCurrentUserMove&&_this.passMove()},1e3,10)},GameController.prototype.stopTimer=function(){this.timerPromise&&(this.$interval.cancel(this.timerPromise),this.timerPromise=null)},GameController.prototype.user2didMove=function(moveRes){var _this=this;this.$scope.$apply(function(){_this.handleMove(moveRes,!1)})},GameController.prototype.passMove=function(){var _this=this;this.connectionHubService.passMove(this.userNum).done(function(moveResult){_this.$scope.$apply(function(){_this.handleMove(moveResult,!0)})})},GameController.prototype.doMove=function(variant){var _this=this;if(0===this.$scope.currentWord.translateVariants.filter(function(v){return v.isSelected}).length&&(this.stopTimer(),0!==this.$scope.secondsForMoveLeft)){var selectedVar=this.$scope.currentWord.translateVariants.filter(function(v){return v.variant===variant})[0];selectedVar?selectedVar.isSelected=!0:console.log("Incorrect var selected"),this.connectionHubService.doMove(this.userNum,this.$scope.currentWord.word,variant).done(function(moveResult){_this.$scope.$apply(function(){_this.handleMove(moveResult,!0)})})}},GameController.prototype.handleMove=function(moveRes,isCurrentUserMove){var _this=this;this.stopTimer();var currentUserScore=1===this.userNum?this.gameInfo.user1Score:this.gameInfo.user2Score,user2Score=1===this.userNum?this.gameInfo.user2Score:this.gameInfo.user1Score,score=isCurrentUserMove?currentUserScore:user2Score;moveRes.isCorrect?moveRes.isSuccessful?score.successfulMoves++:score.wrongMoves++:console.error(moveRes.errorMessage),moveRes.selectedVariantIndex!==-1&&(this.$scope.currentWord.translateVariants[moveRes.selectedVariantIndex].isSelected=!0),1===this.userNum?(this.$scope.currentUserScore=this.gameInfo.user1Score,this.$scope.user2Score=this.gameInfo.user2Score):(this.$scope.currentUserScore=this.gameInfo.user2Score,this.$scope.user2Score=this.gameInfo.user1Score),this.$timeout(function(){function removeFromArrayIf(arr,callback){for(var i=0;i<arr.length;){if(callback(arr[i],i))return void arr.splice(i,1);++i}}if(_this.$scope.isCurrentUserMove=!isCurrentUserMove,_this.$scope.currentWordIndex++,isCurrentUserMove){var passedWord=new Models.PassedWordInfo;passedWord.word=_this.$scope.currentWord.word,passedWord.answer=_this.$scope.currentWord.translateVariants.filter(function(i){return i.isTrue}).shift().variant,passedWord.wasPassed=moveRes.isSuccessful,_this.$scope.passedWords.push(passedWord)}_this.$scope.currentWord=_this.gameInfo.words[_this.$scope.currentWordIndex],_this.setVarinatsOrder(),removeFromArrayIf(_this.$scope.leftWords,function(w){return w.word===_this.$scope.currentWord.word}),moveRes.isLastMove?(_this.stateHandler.handleGameFinished(_this.$scope.currentUserScore.successfulMoves>_this.$scope.user2Score.successfulMoves,_this.$scope.currentUserScore.successfulMoves==_this.$scope.user2Score.successfulMoves),_this.unsetGameInfo()):_this.startTimer()},1e3,!0)},GameController.prototype.setVarinatsOrder=function(){this.$scope.currentWord&&this.$scope.currentWord.translateVariants.forEach(function(value,index){return value.order=index+1})},GameController.$inject=["Services.ConnectToGameService","$scope","Services.StateHandlerService","$interval","$timeout"],GameController}();controllers.GameController=GameController,angular.module(Common.GetConstants().appName).controller("controllers.GameController",GameController)}(controllers||(controllers={})),$(function(){$("#word, .word-left-item-caption").attr("unselectable","on").css({"-moz-user-select":"-moz-none","-o-user-select":"none","-khtml-user-select":"none","-webkit-user-select":"none","-ms-user-select":"none","user-select":"none"}).bind("selectstart",function(){return!1})}),$(function(){$(document).keypress(function(e){if(13===e.which)$(".btn-submit:visible").first().click();else if(e.which>=48&&e.which<=57){var numPressed_1=e.which-48;$(".translateVariant:visible").filter(function(index,elem){return $(elem).data("order")===numPressed_1}).first().click()}})}),$(function(){$("#user2variants").bind("DOMNodeInserted",function(){return $(".translateVariant.nohover").tooltip()})});
//# sourceMappingURL=data:application/json;base64,
